{"version":3,"file":"static/js/602.fdea9b8f.chunk.js","mappings":"mNAIaA,EAAOC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oCAIhBC,EAAOH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2EAMhBG,GAAYL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,+F,SCerC,EAzBmB,SAAHM,GAAmB,IAAbC,EAAKD,EAALC,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAACb,EAAI,CAAAc,SACFJ,EAAMK,KAAI,SAAAC,GAAI,OACbH,EAAAA,EAAAA,KAACT,EAAI,CAAAU,UACHD,EAAAA,EAAAA,KAACP,EAAS,CAACW,GAAE,WAAAC,OAAaF,EAAKG,IAAMC,MAAO,CAAEC,KAAMV,GAAWG,SAC5DE,EAAKM,SAFCN,EAAKG,GAIT,KAIf,C,gJChBaI,EAAatB,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oDAKxBqB,EAAQvB,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gTAkBpBsB,EAASxB,EAAAA,GAAAA,OAAaO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,0R,SCSnC,EA9Ba,SAAHM,GAA0B,IAApBiB,EAAYjB,EAAZiB,aACdC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAWtB,OACEI,EAAAA,EAAAA,MAACV,EAAU,CAACW,SANO,SAAAC,GACnBA,EAAMC,iBACNV,EAAaK,EAAMM,cACrB,EAGqCvB,SAAA,EACjCD,EAAAA,EAAAA,KAACW,EAAK,CACJc,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOV,EACPW,SAhBoB,SAAAP,GACxBH,EAASG,EAAMQ,OAAOF,MACxB,KAgBI5B,EAAAA,EAAAA,KAACY,EAAM,CAACa,KAAK,SAAQxB,SAAC,aAG5B,E,SCWA,EAjCe,WACb,IAAAa,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CiB,EAAWf,EAAA,GAAEgB,EAAchB,EAAA,GAClCiB,GAA8BlB,EAAAA,EAAAA,WAAS,GAAMmB,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAwCtB,EAAAA,EAAAA,WAAS,GAAMuB,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAkBpC,OACElB,EAAAA,EAAAA,MAAA,QAAAnB,SAAA,EACED,EAAAA,EAAAA,KAACyC,EAAI,CAAC5B,aAlBW,SAAA6B,GACnBN,GAAW,IAEXO,EAAAA,EAAAA,sBAAqBD,GAClBE,MAAK,SAAAC,GACJb,EAAea,GACfL,EAAyC,IAAzBK,EAAcC,OAChC,IACCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACd,IACCG,SAAQ,WACPf,GAAW,EACb,GACJ,IAKKD,IAAWnC,EAAAA,EAAAA,KAACoD,EAAAA,EAAM,IAClBb,IACCvC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4DAEJ8B,IAAe/B,EAAAA,EAAAA,KAACqD,EAAAA,EAAU,CAACxD,MAAOkC,MAGzC,C","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 4px 8px;\n  outline: none;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 4px 8px;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchForm, Input, Button } from './Form.styled';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </SearchForm>\n  );\n};\n\nForm.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n};\n\nexport default Form;","import { useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'pages/EditorList/EditorList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/TmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n\n  const searchMovies = queryMovie => {\n    setLoading(true);\n\n    fetchSearchByKeyword(queryMovie)\n      .then(searchResults => {\n        setSearchFilms(searchResults);\n        setNoMoviesText(searchResults.length === 0);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <main>\n      <Form searchMovies={searchMovies} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n      {searchFilms && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","MovieLink","Link","_templateObject3","_ref","films","location","useLocation","_jsx","children","map","film","to","concat","id","state","from","title","SearchForm","Input","Button","searchMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_jsxs","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","searchFilms","setSearchFilms","_useState3","_useState4","loading","setLoading","_useState5","_useState6","noMoviesText","setNoMoviesText","Form","queryMovie","fetchSearchByKeyword","then","searchResults","length","catch","error","console","log","finally","Loader","EditorList"],"sourceRoot":""}